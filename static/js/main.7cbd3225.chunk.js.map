{"version":3,"sources":["context/counter-context.js","components/counter-display.js","components/counter-buttons.js","views/counter-view.js","context/contact-context.js","components/contact-form.js","components/contact-table.js","views/contact-view.js","App.js","serviceWorker.js","index.js"],"names":["CounterContext","createContext","CounterContextProvider","props","useState","count","setCount","Provider","value","children","CounterDisplay","useContext","Statistic","Value","Label","CounterButtons","Button","Group","color","onClick","CounterView","Segment","textAlign","ContactContext","initialState","contacts","id","name","email","loading","error","reducer","state","action","type","payload","filter","contact","Error","ContactContextProvider","useReducer","dispatch","ContactForm","useFormInput","basic","Form","onSubmit","_","uniqueId","onReset","widths","Field","width","Input","placeholder","required","fluid","primary","initialValue","setValue","onChange","e","target","ContactTable","selectedId","setSelectedId","rows","map","Table","Row","key","active","Cell","celled","striped","selectable","Header","HeaderCell","Body","Footer","fullWidth","colSpan","floated","icon","labelPosition","size","disabled","Icon","Contacts","as","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.7cbd3225.chunk.js","sourcesContent":["import React, { useState, createContext } from \"react\";\n\n// Create Context Object\nexport const CounterContext = createContext();\n\n// Create a provider for components to consume and subscribe to changes\nexport const CounterContextProvider = props => {\n  const [count, setCount] = useState(0);\n\n  return (\n    <CounterContext.Provider value={[count, setCount]}>\n      {props.children}\n    </CounterContext.Provider>\n  );\n};\n","import React, { useContext } from \"react\";\nimport { Statistic } from \"semantic-ui-react\";\nimport { CounterContext } from \"../context/counter-context\";\n\nexport default function CounterDisplay() {\n  const [count] = useContext(CounterContext);\n\n  return (\n    <Statistic>\n      <Statistic.Value>{count}</Statistic.Value>\n      <Statistic.Label>Counter</Statistic.Label>\n    </Statistic>\n  );\n}\n","import React, { useContext } from \"react\";\nimport { Button } from \"semantic-ui-react\";\nimport { CounterContext } from \"../context/counter-context\";\n\nexport default function CounterButtons() {\n  const [count, setCount] = useContext(CounterContext);\n\n  const increment = () => {\n    setCount(count + 1);\n  };\n\n  const decrement = () => {\n    setCount(count - 1);\n  };\n\n  return (\n    <div>\n      <Button.Group>\n        <Button color=\"green\" onClick={increment}>\n          Add\n        </Button>\n        <Button color=\"red\" onClick={decrement}>\n          Minus\n        </Button>\n      </Button.Group>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Segment } from \"semantic-ui-react\";\n\nimport { CounterContextProvider } from \"../context/counter-context\";\nimport CounterDisplay from \"../components/counter-display\";\nimport CounterButtons from \"../components/counter-buttons\";\n\nexport default function CounterView() {\n  return (\n    <CounterContextProvider>\n      <h3>Counter</h3>\n      <Segment textAlign=\"center\">\n        <CounterDisplay />\n        <CounterButtons />\n      </Segment>\n    </CounterContextProvider>\n  );\n}\n","import React, { useReducer, createContext } from \"react\";\n\nexport const ContactContext = createContext();\n\nconst initialState = {\n  contacts: [\n    {\n      id: \"098\",\n      name: \"Diana Prince\",\n      email: \"diana@us.army.mil\"\n    },\n    {\n      id: \"099\",\n      name: \"Bruce Wayne\",\n      email: \"bruce@batmail.com\"\n    },\n    {\n      id: \"100\",\n      name: \"Clark Kent\",\n      email: \"clark@metropolitan.com\"\n    }\n  ],\n  loading: false,\n  error: null\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"ADD_CONTACT\":\n      return {\n        contacts: [...state.contacts, action.payload]\n      };\n    case \"DEL_CONTACT\":\n      return {\n        contacts: state.contacts.filter(\n          contact => contact.id !== action.payload\n        )\n      };\n    case \"START\":\n      return {\n        loading: true\n      };\n    case \"COMPLETE\":\n      return {\n        loading: false\n      };\n    default:\n      throw new Error();\n  }\n};\n\nexport const ContactContextProvider = props => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    <ContactContext.Provider value={[state, dispatch]}>\n      {props.children}\n    </ContactContext.Provider>\n  );\n};\n","import React, { useState, useContext } from \"react\";\nimport { Segment, Form, Input, Button } from \"semantic-ui-react\";\nimport _ from \"lodash\";\nimport { ContactContext } from \"../context/contact-context\";\n\nexport default function ContactForm() {\n  const name = useFormInput(\"\");\n  const email = useFormInput(\"\");\n  // eslint-disable-next-line no-unused-vars\n  const [state, dispatch] = useContext(ContactContext);\n\n  const onSubmit = () => {\n    dispatch({\n      type: \"ADD_CONTACT\",\n      payload: { id: _.uniqueId(10), name: name.value, email: email.value }\n    });\n    // Reset Form\n    name.onReset();\n    email.onReset();\n  };\n\n  return (\n    <Segment basic>\n      <Form onSubmit={onSubmit}>\n        <Form.Group widths=\"3\">\n          <Form.Field width={6}>\n            <Input placeholder=\"Enter Name\" {...name} required />\n          </Form.Field>\n          <Form.Field width={6}>\n            <Input placeholder=\"Enter Email\" {...email} type=\"email\" required />\n          </Form.Field>\n          <Form.Field width={4}>\n            <Button fluid primary>\n              New Contact\n            </Button>\n          </Form.Field>\n        </Form.Group>\n      </Form>\n    </Segment>\n  );\n}\n\nfunction useFormInput(initialValue) {\n  const [value, setValue] = useState(initialValue);\n\n  const handleChange = e => {\n    setValue(e.target.value);\n  };\n\n  const handleReset = () => {\n    setValue(\"\");\n  };\n\n  return {\n    value,\n    onChange: handleChange,\n    onReset: handleReset\n  };\n}\n","import React, { useState, useContext } from \"react\";\nimport { Segment, Table, Button, Icon } from \"semantic-ui-react\";\nimport { ContactContext } from \"../context/contact-context\";\n\nexport default function ContactTable() {\n  // Subscribe to `contacts` state and access dispatch function\n  const [state, dispatch] = useContext(ContactContext);\n  // Declare a local state to be used internally by this component\n  const [selectedId, setSelectedId] = useState();\n\n  const delContact = id => {\n    dispatch({\n      type: \"DEL_CONTACT\",\n      payload: id\n    });\n  };\n\n  const onRemoveUser = () => {\n    delContact(selectedId);\n    setSelectedId(null); // Clear selection\n  };\n\n  const rows = state.contacts.map(contact => (\n    <Table.Row\n      key={contact.id}\n      onClick={() => setSelectedId(contact.id)}\n      active={contact.id === selectedId}\n    >\n      <Table.Cell>{contact.id}</Table.Cell>\n      <Table.Cell>{contact.name}</Table.Cell>\n      <Table.Cell>{contact.email}</Table.Cell>\n    </Table.Row>\n  ));\n\n  return (\n    <Segment>\n      <Table celled striped selectable>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>Id</Table.HeaderCell>\n            <Table.HeaderCell>Name</Table.HeaderCell>\n            <Table.HeaderCell>Email</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>{rows}</Table.Body>\n        <Table.Footer fullWidth>\n          <Table.Row>\n            <Table.HeaderCell />\n            <Table.HeaderCell colSpan=\"4\">\n              <Button\n                floated=\"right\"\n                icon\n                labelPosition=\"left\"\n                color=\"red\"\n                size=\"small\"\n                disabled={!selectedId}\n                onClick={onRemoveUser}\n              >\n                <Icon name=\"trash\" /> Remove User\n              </Button>\n            </Table.HeaderCell>\n          </Table.Row>\n        </Table.Footer>\n      </Table>\n    </Segment>\n  );\n}\n","import React from \"react\";\nimport { Segment, Header } from \"semantic-ui-react\";\nimport ContactForm from \"../components/contact-form\";\nimport ContactTable from \"../components/contact-table\";\nimport { ContactContextProvider } from \"../context/contact-context\";\n\nexport default function Contacts() {\n  return (\n    <ContactContextProvider>\n      <Segment basic>\n        <Header as=\"h3\">Contacts</Header>\n        <ContactForm />\n        <ContactTable />\n      </Segment>\n    </ContactContextProvider>\n  );\n}\n","import React from \"react\";\nimport { Container } from \"semantic-ui-react\";\n\nimport CounterView from \"./views/counter-view\";\nimport ContactView from \"./views/contact-view\";\n\nexport default function App() {\n  return (\n    <Container>\n      <h1>React Hooks Context Demo</h1>\n      <CounterView />\n      <ContactView />\n    </Container>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"fomantic-ui-css/semantic.min.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}